JAMBOARD
=========

OVERVIEW

This is a simple wavetable synthesizer that allows you to play a monophonic
melody using the keys on your keyboard.  The pitch ranges four octaves from
A-100 to A-1760, and the timbre can be sine wave, square wave, or a custom
timbre.  There are three modes:

   'c'  Continuous sine/square wave mode--
          A sine/square wave sounds at a fixed amplitude. To enter this mode,
          execute with 'c' as the mode argument:

                   ./jamboard c

          with no additional command line arguments from the directory where
          you compiled to.

   'C'  Custom timbre mode--
          Similar to 'c' mode, except that you create your own synth sound
          by setting the relative amplitude (0 <= X <= 100) of each harmonic
          that is present in the sound, up to the 31st harmonic.  To enter
          this mode execute with 'C' as the mode argument.  The next argument
          is the amplitude of the fundamental, and every following argument
          is the amplitude of the next highest harmonic.

          Example:

                  ./jamboard C 100 60 20 0 0 50

                             ^  ^  ^  ^  ^ ^  ^
                        _____|  |  |  |  | |  |
                       /       /  /   |   \ \  \
                      /       /  /    |    \ \  \
                     /       /  /     |     \ \  \
                    v       /  /      |      \ \  \
                 'mode'    /  /       |       \ \  \
                          /  /        |        \ \  \
                         /  /         |         \ \  \
                        /  /          |         |  \  \
                       /  /           |         |   \  \
                      /  /            |         |    \  \
                     /  /             |         |     \  \
              ______/  /              |         |      \  \
             /         |              |         |       \  \____________
            |          |              |         |        \             |
            v          v              v         v         v            v
   'fundamental'  '1st harm.'  '2nd harm.' '3rd harm.' '4th harm.'  '5th harm.'

   'e'  Envelope control mode--
          Attack, decay, and release are set using command line arguments.
          Notes are played sequentially, with no overlap of the envelopes
          of adjacent notes.  This makes the melody very slow and lacking
          in rhythm, but I will be expanding the capabilities of this mode.

          There are 6 additional command line arguments:
            1] 'initial' -> The initial amplitude value (as a percentage of
                         maximum possible amplitude)
            2] 'peak'    -> The peak amplitude value (as a percentage of
                         maximum possible amplitude)
            3] 'sustain' -> The sustained amplitude value (as a percentage of
                         maximum possible amplitude)
            4] 'attack'  -> Relative length of attack (values of 1-6 are
                            appropriate, where higher value = longer attack)
            5] 'decay'   -> Relative length of decay (values of 1-6 are
                            appropriate, where higher value = longer decay)
            6] 'release' -> Relative length of release (values of 1-6 are
                            appropriate, where higher value = longer release)

          Example:

             ./jamboard e 0 100 30 1 1 1

                        ^ ^  ^  ^  ^ ^ ^
                        | |  |  |  | | |
                       / /  /   |   \ \ \
               _______/ /  /    |    \ \ \
              /        /  /     |     \ \ \
             V        /  /      |      | \ \
          'mode'     /  /       |      |  \ \
                    /  /        |      |   \ \
                   /   |        |      |    \ \
                  /    |        |      |     \ \
                 /     |        |      |      \ \
                /      |        |      |       \ \
               /       |        |      |       |  \
              /        |        |      |       |   \
             |         |        |      |       |    \_____
             |         |        |      |       |         |
             v         v        v      v       v         v
         'initial'  'peak'   'sus.' 'attack' 'decay'  'release'



COMMANDS

When the program initiates it provides a prompt ('>> ').  This is where you
enter all commands, including note changes.  To enter a command, type it and
then hit RETURN.

The notes of the octave you are in are organized based on the number keys of
your keyboard.  1 is the lowest A in the octave, and 8 is A one octave higher.
The numbers in-between 1 and 8 each correspond to the associated degree
of the A-min scale (e.g. 3 is the C above 1).  Notes not in the scale
are represented by the ASCII key directly below and between the number keys
that correspond to its nearest neighbors (e.g. C# is played by entering 'e').

If that is confusing, this schematic showing spatial arrangement of keys
and their associated note values may help:

---------------- KEYS: -----------------------|
                                              |
[`][1]   [2] [3]   [4]   [5] [6]   [7]   [8]  |
      [q]       [e]   [r]       [y]   [u]     |
                                              |
----------- CORRESPONDING NOTES: -------------|
                                              |
[g#][a]   [b] [c]   [d]   [e] [f]   [g]   [a] |
       [a#]      [c#]  [d#]      [f#]  [g#]   |
______________________________________________|

   OTHER COMMANDS:
   --------------
     -   --->  Go down an octave
     =   --->  Go up an octave (if it were '+' you would have to type shift...)
     A   --->  Timbre = sine wave (default in 'c' mode; undefined in 'e' mode)
     S   --->  Timbre = square wave (undefined in 'e' mode)
     z   --->  Print operation info to terminal
     x   --->  EXIT PROGRAM



PORTAUDIO DEPENDENCY

This program is written using the PortAudio API, so you will need to download and install
pa_stable_v19_20140130.tgz from the PortAudio website if you do not already
have it:

        http://portaudio.com/download.html

This version of PortAudio in turn depends on the Mac 10.4 SDK, which was part
of Xcode 3, but has since been superseded.  As far as I know, Apple does not
provide any legacy SDKs, so this can be hard to find.  However, if you use
Homebrew to download PortAudio you shouldn't have to worry about finding the
right SDK.



COMPILING

When compiling, you must include an option for searching the 'portaudio'
library.  Otherwise you will get an 'undefined symbols for architecture
x86_64' error, telling you that all the PortAudio functions in the script
are undefined.  If you use the gcc, compile like this:

	      gcc melodyARG.c -lportaudio -o melodyARG



PORTAUDIO LICENSE

 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
