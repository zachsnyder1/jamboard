JAMBOARD
=========

OVERVIEW

This is a wavetable synthesizer that allows you to play either a monophonic
or polyphonic melody using the keys on your keyboard.  The pitch ranges four
octaves from A-100 to A-1760, and the timbre can be sine wave, square wave,
or a custom timbre.  There are two modes:

   'c'  Continuous signal (monophonic) mode--
          A sine/square wave or customized waveform sounds at a fixed
          amplitude. To enter this mode, execute with 'c' as the mode argument

                   ./jamboard c

          with no additional command line arguments from the directory where
          you compiled to.

   'e'  Envelope control (polyphonic) mode--
          Attack, decay, and release are set using command line arguments.
          Up to six notes can sound simultaneously.  If a seventh note is
          toggled the new note will not sound, and a failure message will
          be printed to the terminal (but the program will not crash).
          Timbre can be sine/square wave, or a customized waveform.

          There are 6 additional command line arguments:
            1] 'initial' -> The initial amplitude value (as a percentage of
                         maximum possible amplitude)
            2] 'peak'    -> The peak amplitude value (as a percentage of
                         maximum possible amplitude)
            3] 'sustain' -> The sustained amplitude value (as a percentage of
                         maximum possible amplitude)
            4] 'attack'  -> Relative length of attack (values of 1-6 are
                            appropriate, where higher value = longer attack)
            5] 'decay'   -> Relative length of decay (values of 1-6 are
                            appropriate, where higher value = longer decay)
            6] 'release' -> Relative length of release (values of 1-6 are
                            appropriate, where higher value = longer release)

          Example:

             ./jamboard e 0 100 30 1 1 1

                        ^ ^  ^  ^  ^ ^ ^
                        | |  |  |  | | |
                       / /  /   |   \ \ \
               _______/ /  /    |    \ \ \
              /        /  /     |     \ \ \
             V        /  /      |      | \ \
          'mode'     /  /       |      |  \ \
                    /  /        |      |   \ \
                   /   |        |      |    \ \
                  /    |        |      |     \ \
                 /     |        |      |      \ \
                /      |        |      |       \ \
               /       |        |      |       |  \
              /        |        |      |       |   \
             |         |        |      |       |    \_____
             |         |        |      |       |         |
             v         v        v      v       v         v
         'initial'  'peak'   'sus.' 'attack' 'decay'  'release'

         NOTE: Initial values that are not 0 may cause a clicking sound at the
               beggining of each note, which isn't the best for your speakers.
               I strongly recommend using an initial value of 0.



COMMANDS

When the program initiates it provides a prompt ('>> ').  This is where you
enter all commands, including note changes.  To enter a command, type it and
then hit RETURN.

The notes of the octave you are in are organized based on the number keys of
your keyboard.  1 is the lowest A in the octave, and 8 is A one octave higher.
The numbers in-between 1 and 8 each correspond to the associated degree
of the A-min scale (e.g. 3 is the C above 1).  Notes not in the scale
are represented by the ASCII key directly below and between the number keys
that correspond to its nearest neighbors (e.g. C# is played by entering 'e').

If that is confusing, this schematic showing spatial arrangement of keys
and their associated note values may help:

---------------- KEYS: -----------------------|
                                              |
[`][1]   [2] [3]   [4]   [5] [6]   [7]   [8]  |
      [q]       [e]   [r]       [y]   [u]     |
                                              |
----------- CORRESPONDING NOTES: -------------|
                                              |
[g#][a]   [b] [c]   [d]   [e] [f]   [g]   [a] |
       [a#]      [c#]  [d#]      [f#]  [g#]   |
______________________________________________|

   OTHER COMMANDS:
   --------------
     -   --->  Go down an octave
     =   --->  Go up an octave (if it were '+' you would have to type shift...)
     A   --->  Timbre = sine wave (default)
     S   --->  Timbre = square wave
     C   --->  Synthesize custom timbre (SEE BELOW FOR FULL DESCRIPTION)
     z   --->  Print operation info to terminal
     x   --->  EXIT PROGRAM


SPECIAL COMMAND: SYNTHESIZE CUSTOM TIMBRE

The 'synthesize custom timbre' function allows you to synthesize a new sound by
setting the relative amplitude for each harmonic, up to the 31st harmonic.
Relative amplitudes are values between 0 and 100.  Enter a value for each
harmonic as you are promted.  A value of 0 means the harmonic is not included
in the sound.  When you have entered a value for the highest harmonic that you
want to include, enter 's' (without quotations), and hit RETURN, to synthesize
the sound.

  LOCAL COMMANDS:
  --------------
    z   --->  Print custom synthesis info
    s   --->  Synthesize waveform
    x   --->  Abort custom timbre synthesis and return to jam


PORTAUDIO DEPENDENCY

This program is written using the PortAudio API, so you will need to download and install
pa_stable_v19_20140130.tgz from the PortAudio website if you do not already
have it:

        http://portaudio.com/download.html

This version of PortAudio in turn depends on the Mac 10.4 SDK, which was part
of Xcode 3, but has since been superseded.  As far as I know, Apple does not
provide any legacy SDKs, so this can be hard to find.  However, if you use
Homebrew to download PortAudio you shouldn't have to worry about finding the
right SDK:

        brew install portaudio



COMPILING

When compiling, you may need to explicitly link to the 'portaudio' library.
If you use the gcc, compile like this:

	      gcc jamboard.c -lportaudio -o jamboard



PORTAUDIO LICENSE

 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
